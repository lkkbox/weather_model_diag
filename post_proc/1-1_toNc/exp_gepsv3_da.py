#!/nwpr/gfs/com120/.conda/envs/rd/bin/python
from pytools.modeldata.process import Processor, Variable
import pytools.timetools as tt


def main():
    for modelName in [
        'exp_gepsv3_da-all',
        'exp_gepsv3_da-off',
        'exp_gepsv3_da-sst',
    ]:
        run(modelName)

def run(modelName):
    rootSrcDir = '../../../data/source'    # input
    rootDesDir = '../../../data/postProc'  # output
    workDir    = '../../../wdir' # temporary dir
    initTimes  = [
        tt.ymd2float(2024, 1, 1) + i
        for i in range(31)
    ] # model initiation times
    members = [0] #ensemble members
    srcPathLambda = lambda initTime, member, lead, fileNameKey: tt.float2format(
        initTime, f'%y%m%d%H_{member:03d}.ufs/TCo383/GFS_%Y%m%d%H_{lead:04d}.grb2'
    ) # fileNameKey is for fake dms
    gridFile   = f'../../../data/griddes/GEPSv3.txt' # grid description file for cdo,
                                                  # generated by "cdo griddes INFILE > out.txt"
    # now go down to setup variables

    processor = Processor(
        modelName=modelName,
        rootDesDir=rootDesDir,
        rootSrcDir=rootSrcDir,
        workDir=workDir,
        gridFile=gridFile,
        srcPathLambda=srcPathLambda,
        initTimes=initTimes,
        members=members,
        variables=getVariables(),
        printDesSummary=False,
        forceUpdate=False,
    )
    processor.run()


def getVariables():
    levels = [10, 50, 100, 200, 300, 500, 700, 850, 925, 1000] # in hPa
    outputTypes_4d   = ['analysis', 'global_daily_1p0'] # see "Processor for available options
    outputTypes_3d_inst = ['analysis', 'global_daily_1p0']
    outputTypes_3d_acc  = [            'global_daily_1p0']
    leads = list(range(24, 720+24, 24))

    return [
        # Variable(
        #     varName='u10',
        #     leads=leads,
        #     outputTypes=outputTypes_3d_inst,
        #     grib2Matches=[':UGRD:10 m above ground:'],
        #     numRecordsPerFile=1,
        #     cdoVarName='10u',
        # ),
        # Variable(
        #     varName='v10',
        #     leads=leads,
        #     outputTypes=outputTypes_3d_inst,
        #     grib2Matches=[':VGRD:10 m above ground:'],
        #     numRecordsPerFile=1,
        #     cdoVarName='10v',
        # ),
        # Variable(
        #     varName='t2m',
        #     leads=leads,
        #     outputTypes=outputTypes_3d_inst,
        #     grib2Matches=[':TMP:2 m above ground:'],
        #     numRecordsPerFile=1,
        #     cdoVarName='2t',
        # ),
        # Variable(
        #     varName='pw',
        #     leads=leads,
        #     outputTypes=outputTypes_3d_inst,
        #     grib2Matches=[':PWAT:entire atmosphere'],
        #     numRecordsPerFile=1,
        #     cdoVarName='pwat',
        # ),
        # Variable(
        #     varName='mslp',
        #     leads=leads,
        #     outputTypes=outputTypes_3d_inst,
        #     grib2Matches=[':PRMSL:mean sea level:'],
        #     numRecordsPerFile=1,
        #     cdoVarName='prmsl',
        #     multiplyConstant=0.01,
        # ),
        Variable(
            varName='prec',
            leads=leads,
            outputTypes=outputTypes_3d_acc,
            grib2Matches=[
                ':APCP:0 m above ground:.* day acc fcst:'
                # regex would work
                # or you can alsoexplicitly write all matches to this list
            ],
            numRecordsPerFile=1,
            cdoVarName='param8.1.0',
            shiftHour=3,
            multiplyConstant=4,
        ),
        Variable(
            varName='olr',
            leads=leads,
            outputTypes=outputTypes_3d_acc,
            grib2Matches=[
                f':NLWRF:top of atmosphere:.* day ave fcst:' 
                # regex would work
                # or you can alsoexplicitly write all matches to this list
            ],
            numRecordsPerFile=1,
            cdoVarName='avg_tnlwrf', # use "cdo showname *.grib2" to get this value
            shiftHour=-12,
        ),
        Variable(
            varName='u',
            leads=leads,
            outputTypes=outputTypes_4d,
            grib2Matches=[f':UGRD:{l} mb:' for l in levels],
            numRecordsPerFile=len(levels),
        ),
        Variable(
            varName='v',
            leads=leads,
            outputTypes=outputTypes_4d,
            grib2Matches=[f':VGRD:{l} mb:' for l in levels],
            numRecordsPerFile=len(levels),
        ),
        # Variable(
        #     varName='t',
        #     leads=leads,
        #     outputTypes=outputTypes_4d,
        #     grib2Matches=[f':TMP:{l} mb:' for l in levels],
        #     numRecordsPerFile=len(levels),
        # ),
        # Variable(
        #     varName='z',
        #     leads=leads,
        #     outputTypes=outputTypes_4d,
        #     grib2Matches=[f':HGT:{l} mb:' for l in levels],
        #     numRecordsPerFile=len(levels),
        #     cdoVarName='gh'
        # ),
        Variable(
            varName='q',
            leads=leads,
            outputTypes=outputTypes_4d,
            grib2Matches=[f':SPFH:{l} mb:' for l in levels],
            numRecordsPerFile=len(levels),
        ),
    ]


if __name__ == '__main__':
    main()
